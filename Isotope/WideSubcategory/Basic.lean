import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Functor.Basic
import Mathlib.CategoryTheory.Monoidal.Category
import Mathlib.CategoryTheory.Monoidal.Braided
import Mathlib.Combinatorics.Quiver.Subquiver

open CategoryTheory

class WideSubcategory (C) [Category C] where
  contains: WideSubquiver C
  contains_comp: ‚àÄ{X Y Z: C} {f: X ‚ü∂ Y} {g: Y ‚ü∂ Z},
    contains X Y f -> contains Y Z g -> contains X Z (f ‚â´ g)
  contains_id: ‚àÄ(X: C), contains X X (ùüô X)

def WideSubcategory.discrete (C) [Category C]: WideSubcategory C where
  contains X Y f := ‚àÉH: X = Y, f = H ‚ñ∏ ùüô X
  contains_comp := Œª‚ü®HXY, Hf‚ü© ‚ü®HYZ, Hg‚ü© => ‚ü®
    HXY ‚ñ∏ HYZ,
    by cases HXY; cases HYZ; cases Hf; cases Hg; simp‚ü©
  contains_id X := ‚ü®rfl, rfl‚ü©

def WideSubcategory.full (C) [Category C]: WideSubcategory C where
  contains _ _ _ := True
  contains_comp _ _ := True.intro
  contains_id _ := True.intro

def WideSubcategory.intersect {C} [Category C]
  (L R: WideSubcategory C): WideSubcategory C where
  contains X Y f := L.contains X Y f ‚àß R.contains X Y f
  contains_comp Hf Hg := ‚ü®
    L.contains_comp Hf.1 Hg.1,
    R.contains_comp Hf.2 Hg.2‚ü©
  contains_id X := ‚ü®L.contains_id X, R.contains_id X‚ü©
